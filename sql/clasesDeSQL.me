### Clase 1: Introducción a SQL

**SQL (Structured Query Language)** es el lenguaje estándar utilizado para interactuar con bases de datos relacionales. SQL te permite realizar diversas operaciones, como crear bases de datos y tablas, insertar datos, consultar información, actualizar registros, y eliminar datos. En esta clase, aprenderás los fundamentos de SQL, enfocándote en las consultas básicas y la creación de tablas.

#### 1. Conceptos Básicos de SQL

- **Bases de Datos Relacionales**: Una base de datos relacional organiza los datos en tablas que pueden estar relacionadas entre sí. Cada tabla tiene filas (registros) y columnas (campos).
  
- **Tablas**: Una tabla es una estructura que organiza los datos en filas y columnas. Cada columna tiene un tipo de dato específico, como `INT`, `VARCHAR`, `DATE`, etc.

- **Consultas**: Una consulta es una solicitud para obtener información de una base de datos. Las consultas en SQL comienzan con una palabra clave, como `SELECT`, que se usa para recuperar datos.

#### 2. Operaciones Básicas en SQL

- **Crear Tablas**: El comando `CREATE TABLE` se utiliza para crear una nueva tabla en la base de datos.
  
  ```sql
  CREATE TABLE empleados (
      id INT PRIMARY KEY,
      nombre VARCHAR(50),
      apellido VARCHAR(50),
      fecha_contratacion DATE,
      salario DECIMAL(10, 2)
  );
  ```

- **Insertar Datos**: El comando `INSERT INTO` se utiliza para añadir nuevos registros a una tabla.
  
  ```sql
  INSERT INTO empleados (id, nombre, apellido, fecha_contratacion, salario)
  VALUES (1, 'Juan', 'Pérez', '2024-01-15', 3500.00);
  ```

- **Consultar Datos**: El comando `SELECT` se utiliza para recuperar datos de una tabla.
  
  ```sql
  SELECT nombre, apellido, salario 
  FROM empleados;
  ```

- **Actualizar Datos**: El comando `UPDATE` se utiliza para modificar los datos existentes en una tabla.
  
  ```sql
  UPDATE empleados
  SET salario = 3800.00
  WHERE id = 1;
  ```

- **Eliminar Datos**: El comando `DELETE` se utiliza para eliminar registros de una tabla.
  
  ```sql
  DELETE FROM empleados
  WHERE id = 1;
  ```

#### Tarea para Practicar

1. **Crea una tabla** llamada `productos` con los siguientes campos:
   - `id` (tipo `INT`, clave primaria)
   - `nombre_producto` (tipo `VARCHAR(100)`)
   - `categoria` (tipo `VARCHAR(50)`)
   - `precio` (tipo `DECIMAL(10, 2)`)
   - `fecha_registro` (tipo `DATE`)

2. **Inserta al menos 3 registros** en la tabla `productos`.

3. **Realiza una consulta** que seleccione todos los productos y muestre los campos `nombre_producto`, `categoria`, y `precio`.

4. **Actualiza el precio** de uno de los productos.

5. **Elimina un producto** de la tabla `productos` utilizando su `id`.

Esta tarea te permitirá familiarizarte con las operaciones básicas en SQL y entender cómo interactuar con una base de datos relacional.

Respuestas:

1. **Creación de la tabla**:
   - El comando `CREATE TABLE productos` está bien formulado. Solo ten en cuenta que la palabra "Categoría" en el nombre de la columna no debería tener acentos. Una forma correcta sería:
     ```sql
     CREATE TABLE productos(
        ID INT PRIMARY KEY,
        Nombre_Producto VARCHAR(100),
        Categoria VARCHAR(50),
        Precio DECIMAL(10,2),
        Fecha_Registro DATE
     );
     ```

2. **Inserción de datos**:
   - El uso de `INSERT ALL` y `SELECT * FROM dual` es específico de Oracle SQL. Pero tienes algunos errores en tu sintaxis:
     - No utilizaste comillas para los valores de texto.
     - Las fechas deben estar entre comillas y en un formato aceptado.
     - Te faltan las comillas en el segundo `INSERT`.
   - Aquí te dejo la versión corregida:
     ```sql
     INSERT ALL
        INTO productos (ID, Nombre_Producto, Categoria, Precio, Fecha_Registro) VALUES (1, 'CELULAR', 'TECNOLOGÍA', 324000, '24-AUG-24')
        INTO productos (ID, Nombre_Producto, Categoria, Precio, Fecha_Registro) VALUES (2, 'COMPUTADOR', 'TECNOLOGÍA', 543000, '24-AUG-24')
     SELECT * FROM dual;
     ```

3. **Consulta**:
   - Tu consulta está correctamente formulada:
     ```sql
     SELECT Nombre_Producto, Categoria, Precio
     FROM productos;
     ```

4. **Actualización de datos**:
   - La actualización es correcta:
     ```sql
     UPDATE productos 
     SET Precio = 456000
     WHERE ID = 1;
     ```

5. **Eliminación de datos**:
   - Hay un pequeño error tipográfico en tu comando `DELETE`. El comando correcto es:
     ```sql
     DELETE FROM productos
     WHERE ID = 2;
     ```

____________________________________________________________________________________________________________________
### Clase 2: Filtrado y Ordenación de Datos en SQL

En esta clase, aprenderás cómo filtrar y ordenar datos en SQL utilizando las cláusulas `WHERE` y `ORDER BY`. Estas herramientas son esenciales para extraer información específica y organizarla según tus necesidades.

#### 1. Filtrado de Datos con `WHERE`

La cláusula `WHERE` se utiliza para filtrar filas de una tabla que cumplen con una condición específica. Solo las filas que satisfacen esta condición serán devueltas en la consulta.

**Sintaxis:**
```sql
SELECT columnas
FROM tabla
WHERE condición;
```

**Ejemplo:**
```sql
SELECT Nombre_Producto, Precio
FROM productos
WHERE Precio > 400000;
```
En este ejemplo, se seleccionan todos los productos cuyo precio es mayor a 400,000.

#### 2. Operadores de Comparación y Lógicos

Puedes usar operadores de comparación y lógicos en la cláusula `WHERE` para crear condiciones más complejas.

- **Operadores de Comparación:**
  - `=` : Igual a
  - `<>` : Diferente de
  - `>` : Mayor que
  - `<` : Menor que
  - `>=` : Mayor o igual que
  - `<=` : Menor o igual que

- **Operadores Lógicos:**
  - `AND` : Todas las condiciones deben ser verdaderas.
  - `OR` : Al menos una condición debe ser verdadera.
  - `NOT` : Niega una condición.

**Ejemplo con operadores lógicos:**
```sql
SELECT Nombre_Producto, Precio
FROM productos
WHERE Precio > 300000 AND Categoria = 'TECNOLOGÍA';
```
En este ejemplo, se seleccionan los productos de la categoría "TECNOLOGÍA" cuyo precio es mayor a 300,000.

#### 3. Ordenación de Datos con `ORDER BY`

La cláusula `ORDER BY` se utiliza para ordenar los resultados de una consulta. Puedes ordenar los resultados de manera ascendente (predeterminado) o descendente.

**Sintaxis:**
```sql
SELECT columnas
FROM tabla
ORDER BY columna [ASC|DESC];
```

**Ejemplo:**
```sql
SELECT Nombre_Producto, Precio
FROM productos
ORDER BY Precio DESC;
```
Este ejemplo ordena los productos por precio en orden descendente.

#### Tarea para Practicar

1. **Consulta todos los productos** de la tabla `productos` donde la categoría sea "TECNOLOGÍA" y el precio sea menor a 500,000.

2. **Ordena los resultados** de la consulta anterior por `Nombre_Producto` en orden ascendente.

3. **Realiza una consulta** que seleccione todos los productos con un precio entre 300,000 y 600,000, y ordénalos por `Precio` en orden descendente.

Esta tarea te ayudará a practicar el uso de las cláusulas `WHERE` y `ORDER BY` para filtrar y ordenar los datos según criterios específicos.

Respuestas:
1. Y 2.
SELECT Nombre_Producto
FROM productos
WHERE Categoria = 'TECNOLOGÍA' AND Precio < 500000
ORDER BY Nombre_Producto ASC;

3.
SELECT Nombre_Producto
FROM productos
WHERE Precio > 300000 AND Precio < 600000
ORDER BY Precio DESC;