Manual desarrollo web clase por clase




















Clase 1: Introducción al Desarrollo Web

#### Objetivos de la Clase:
1. Entender los conceptos básicos del desarrollo web.
2. Crear una página web simple utilizando HTML y CSS.
3. Introducir JavaScript para agregar interactividad básica.

#### Contenidos:
1. **Introducción al Desarrollo Web**
2. **HTML (HyperText Markup Language)**
3. **CSS (Cascading Style Sheets)**
4. **JavaScript**

---

### 1. Introducción al Desarrollo Web

El desarrollo web se divide en dos partes principales:
- **Frontend**: Lo que el usuario ve y con lo que interactúa directamente. Esto incluye HTML, CSS y JavaScript.
- **Backend**: Lógica del servidor, bases de datos, autenticación, etc.

En esta clase, nos centraremos en el **frontend**.

---

### 2. HTML (HyperText Markup Language)

HTML es el lenguaje estándar para crear páginas web. Define la estructura básica del contenido en la web.

#### Estructura Básica de un Documento HTML

```html
<!DOCTYPE html>
<html>
<head>
    <title>Mi Primera Página Web</title>
</head>
<body>
    <h1>¡Hola, Mundo!</h1>
    <p>Esta es mi primera página web.</p>
</body>
</html>
```

#### Explicación:
- `<!DOCTYPE html>`: Declara el tipo de documento.
- `<html>`: Elemento raíz de la página.
- `<head>`: Contiene meta-información sobre el documento.
- `<title>`: Título de la página que aparece en la pestaña del navegador.
- `<body>`: Contiene el contenido visible de la página.

---

### 3. CSS (Cascading Style Sheets)

CSS se utiliza para diseñar y dar estilo a una página web. Permite separar la presentación del contenido.

#### Ejemplo Básico de CSS

```css
body {
    background-color: lightblue;
}

h1 {
    color: navy;
    text-align: center;
}

p {
    font-family: verdana;
    font-size: 20px;
}
```

#### Aplicar CSS a HTML

Puedes incluir CSS directamente en el archivo HTML utilizando la etiqueta `<style>` dentro del `<head>` o enlazar un archivo CSS externo.

```html
<!DOCTYPE html>
<html>
<head>
    <title>Mi Primera Página Web</title>
    <style>
        body {
            background-color: lightblue;
        }
        h1 {
            color: navy;
            text-align: center;
        }
        p {
            font-family: verdana;
            font-size: 20px;
        }
    </style>
</head>
<body>
    <h1>¡Hola, Mundo!</h1>
    <p>Esta es mi primera página web.</p>
</body>
</html>
```

---

### 4. JavaScript

JavaScript es un lenguaje de programación que permite agregar interactividad a una página web.

#### Ejemplo Básico de JavaScript

```html
<!DOCTYPE html>
<html>
<head>
    <title>Mi Primera Página Web</title>
    <style>
        body {
            background-color: lightblue;
        }
        h1 {
            color: navy;
            text-align: center;
        }
        p {
            font-family: verdana;
            font-size: 20px;
        }
    </style>
    <script>
        function mostrarMensaje() {
            alert("¡Hola, Mundo!");
        }
    </script>
</head>
<body>
    <h1>¡Hola, Mundo!</h1>
    <p>Esta es mi primera página web.</p>
    <button onclick="mostrarMensaje()">Haz clic aquí</button>
</body>
</html>
```

#### Explicación:
- `<script>`: Contiene el código JavaScript.
- `function mostrarMensaje() {}`: Define una función llamada `mostrarMensaje`.
- `alert("¡Hola, Mundo!");`: Muestra una alerta con el mensaje "¡Hola, Mundo!".
- `<button onclick="mostrarMensaje()">Haz clic aquí</button>`: Botón que llama a la función `mostrarMensaje` cuando se hace clic en él.

---

### Tarea

1. **Crea una página web con HTML, CSS y JavaScript**:
    - La página debe tener un encabezado (`<h1>`) que diga "Mi Página de Presentación".
    - Debe contener al menos un párrafo (`<p>`) que describa quién eres.
    - Usa CSS para agregar estilos: cambia el color de fondo, el color del texto y la fuente.
    - Añade un botón que, al hacer clic, muestre una alerta con un mensaje de tu elección.

2. **Entrega**:
    - Guarda tu trabajo en un archivo HTML.
    - Opcional: si deseas compartir tu código, puedes subirlo a una plataforma como GitHub.

Clase 2: Introducción a la Interactividad y Manejo del DOM

#### Objetivos de la Clase:
1. Comprender el DOM (Document Object Model).
2. Manipular elementos del DOM usando JavaScript.
3. Agregar interactividad avanzada a una página web.

#### Contenidos:
1. **Introducción al DOM**
2. **Selección de Elementos en el DOM**
3. **Manipulación de Elementos del DOM**
4. **Eventos en JavaScript**

---

### 1. Introducción al DOM

El DOM (Document Object Model) es una interfaz de programación para los documentos HTML y XML. Representa la estructura del documento como un árbol de nodos, donde cada nodo es una parte del documento (etiqueta, atributo, texto, etc.).

### 2. Selección de Elementos en el DOM

Para manipular elementos del DOM, primero debemos seleccionarlos usando JavaScript. 

#### Métodos Comunes para Seleccionar Elementos:
- `getElementById()`: Selecciona un elemento por su ID.
- `getElementsByClassName()`: Selecciona todos los elementos con una clase específica.
- `getElementsByTagName()`: Selecciona todos los elementos con un nombre de etiqueta específico.
- `querySelector()`: Selecciona el primer elemento que coincide con un selector CSS.
- `querySelectorAll()`: Selecciona todos los elementos que coinciden con un selector CSS.

#### Ejemplo:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Manipulación del DOM</title>
</head>
<body>
    <h1 id="titulo">¡Hola, Mundo!</h1>
    <p class="parrafo">Este es un párrafo.</p>
    <p class="parrafo">Este es otro párrafo.</p>

    <script>
        // Selección por ID
        var titulo = document.getElementById("titulo");

        // Selección por clase
        var parrafos = document.getElementsByClassName("parrafo");

        // Selección por etiqueta
        var todosLosParrafos = document.getElementsByTagName("p");

        // Selección con querySelector
        var primerParrafo = document.querySelector(".parrafo");

        // Selección con querySelectorAll
        var todosLosParrafosQS = document.querySelectorAll(".parrafo");

        console.log(titulo);
        console.log(parrafos);
        console.log(todosLosParrafos);
        console.log(primerParrafo);
        console.log(todosLosParrafosQS);
    </script>
</body>
</html>
```

### 3. Manipulación de Elementos del DOM

Una vez seleccionados, podemos manipular los elementos del DOM.

#### Cambiar el Contenido de un Elemento

```javascript
titulo.innerHTML = "¡Bienvenido a Mi Página!";
```

#### Cambiar el Estilo de un Elemento

```javascript
titulo.style.color = "blue";
```

#### Agregar y Eliminar Clases

```javascript
titulo.classList.add("nuevo-estilo");
titulo.classList.remove("parrafo");
```

### 4. Eventos en JavaScript

Los eventos son acciones que ocurren en la página web (como clics, movimientos del ratón, teclas presionadas) que pueden ser detectadas por JavaScript para ejecutar algún código en respuesta.

#### Añadir un Event Listener

```html
<!DOCTYPE html>
<html>
<head>
    <title>Eventos en JavaScript</title>
</head>
<body>
    <button id="miBoton">Haz clic aquí</button>

    <script>
        var boton = document.getElementById("miBoton");

        boton.addEventListener("click", function() {
            alert("¡Botón clickeado!");
        });
    </script>
</body>
</html>
```

### Tarea

1. **Crear una página web interactiva**:
    - La página debe tener un título (`<h1>`), al menos dos párrafos (`<p>`) y un botón (`<button>`).
    - Usa JavaScript para cambiar el contenido del título y los párrafos cuando se haga clic en el botón.
    - Usa CSS para cambiar el estilo de los elementos cuando se haga clic en el botón (por ejemplo, cambiar el color o la fuente).

2. **Entrega**:
    - Guarda tu trabajo en un archivo HTML.
    - Opcional: si deseas compartir tu código, puedes subirlo a una plataforma como GitHub.


### Clase 2: Diseño Responsivo y CSS Avanzado

¡Bienvenido a la segunda clase de desarrollo web! En esta sesión, profundizaremos en técnicas avanzadas de CSS que te permitirán crear sitios web más dinámicos y adaptables a diferentes dispositivos. Los temas principales que abordaremos son el **Diseño Responsivo** y **CSS Flexbox**.

#### 1. Introducción al Diseño Responsivo

**¿Qué es el Diseño Responsivo?**

El diseño responsivo es una metodología de diseño web que permite que las páginas se adapten y se vean bien en una amplia variedad de dispositivos y tamaños de pantalla, desde teléfonos móviles hasta monitores de escritorio grandes. Dado que cada vez más usuarios acceden a internet desde dispositivos con diferentes dimensiones, es esencial que los sitios web sean responsivos para proporcionar una buena experiencia de usuario en cualquier dispositivo.

**Importancia del Diseño Responsivo**

- **Mejor Experiencia de Usuario**: Los usuarios pueden navegar cómodamente sin importar el dispositivo que utilicen.
- **SEO Mejorado**: Los motores de búsqueda, como Google, favorecen los sitios responsivos en sus rankings.
- **Mantenimiento Simplificado**: Tener una única versión del sitio que se adapta a todos los dispositivos facilita las actualizaciones y el mantenimiento.

#### 2. Media Queries en CSS

Las **Media Queries** son una característica de CSS que permite aplicar estilos específicos basados en las características del dispositivo, como el ancho de la pantalla, la orientación, la resolución, entre otros.

**Sintaxis Básica de una Media Query:**

```css
@media (condición) {
    /* Estilos CSS específicos */
}
```

**Ejemplo:**

```css
/* Estilos por defecto para pantallas grandes */
body {
    background-color: white;
    font-size: 16px;
}

/* Estilos para dispositivos con un ancho máximo de 600px (como móviles) */
@media (max-width: 600px) {
    body {
        background-color: lightgray;
        font-size: 14px;
    }
}
```

En este ejemplo, el fondo de la página será blanco y el tamaño de fuente será de 16px en pantallas grandes. Sin embargo, en dispositivos con un ancho de pantalla de 600px o menos, el fondo cambiará a gris claro y el tamaño de fuente a 14px.

**Práctica con Media Queries:**

Intenta modificar tu archivo CSS para que el diseño de tu página cambie cuando se visualiza en dispositivos móviles. Por ejemplo, podrías ajustar el tamaño de las fuentes, los márgenes, o reorganizar elementos para que se adapten mejor a pantallas más pequeñas.

#### 3. CSS Flexbox

**¿Qué es Flexbox?**

Flexbox, o **Flexible Box Layout**, es un módulo de CSS que facilita la creación de layouts flexibles y alineación de elementos dentro de un contenedor. Es especialmente útil para diseñar estructuras responsivas sin necesidad de utilizar flotadores o posicionamientos complicados.

**Propiedades Principales de Flexbox:**

- `display: flex;` o `display: inline-flex;`: Define un contenedor flex.
- `flex-direction`: Establece la dirección de los elementos dentro del contenedor. Valores comunes:
  - `row` (predeterminado): De izquierda a derecha.
  - `column`: De arriba abajo.
- `justify-content`: Alinea los elementos horizontalmente dentro del contenedor. Valores comunes:
  - `flex-start`: Alinea al inicio.
  - `center`: Centra los elementos.
  - `space-between`: Distribuye el espacio entre los elementos.
- `align-items`: Alinea los elementos verticalmente dentro del contenedor. Valores comunes:
  - `stretch` (predeterminado): Estira los elementos para llenar el contenedor.
  - `center`: Centra los elementos.
- `flex-wrap`: Controla si los elementos deben o no envolverse en múltiples líneas.
  - `nowrap` (predeterminado): No envuelve.
  - `wrap`: Envuelve los elementos.

**Ejemplo de Uso de Flexbox:**

Supongamos que queremos crear una barra de navegación donde los elementos estén alineados horizontalmente y distribuidos de manera uniforme.

**HTML:**

```html
<nav class="navbar">
    <div class="logo">MiLogo</div>
    <ul class="nav-links">
        <li><a href="#">Inicio</a></li>
        <li><a href="#">Sobre Mí</a></li>
        <li><a href="#">Contacto</a></li>
    </ul>
</nav>
```

**CSS:**

```css
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #333;
    padding: 10px 20px;
}

.nav-links {
    display: flex;
    list-style: none;
}

.nav-links li {
    margin-left: 20px;
}

.nav-links a {
    color: white;
    text-decoration: none;
    font-size: 18px;
}

.nav-links a:hover {
    text-decoration: underline;
}
```

En este ejemplo:

- La barra de navegación (`.navbar`) utiliza `display: flex;` para alinear sus elementos hijos.
- `justify-content: space-between;` distribuye el espacio restante entre los elementos, colocando el logo a la izquierda y los enlaces a la derecha.
- `.nav-links` también utiliza Flexbox para alinear los enlaces horizontalmente.
- Al pasar el cursor sobre los enlaces, se aplica un subrayado para indicar interactividad.

**Práctica con Flexbox:**

1. **Crear un Layout Flexible:**

   - Añade una sección a tu página HTML con varios elementos (como tarjetas de contenido, imágenes, etc.).
   - Utiliza Flexbox en el contenedor para alinear estos elementos de manera responsiva.
   - Experimenta con diferentes propiedades de Flexbox (`flex-direction`, `justify-content`, `align-items`) para ver cómo afectan el layout.

2. **Diseñar una Galería de Imágenes:**

   - Crea una galería donde las imágenes se ajusten automáticamente al tamaño de la pantalla.
   - Utiliza Flexbox para distribuir las imágenes y asegurar que se reorganizan en filas o columnas según el tamaño de la pantalla.

#### 4. Herramientas y Recursos

- **Herramientas de Desarrollo de Navegadores**: Utiliza las herramientas de desarrollo integradas en navegadores como Chrome o Firefox para inspeccionar elementos, modificar estilos en tiempo real y probar diseños responsivos.
- **Documentación y Tutoriales**:
  - [MDN Web Docs sobre Media Queries](https://developer.mozilla.org/es/docs/Web/CSS/Media_Queries/Using_media_queries)
  - [MDN Web Docs sobre Flexbox](https://developer.mozilla.org/es/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox)

### Tarea para Practicar

1. **Crear una Página Web Responsiva con Flexbox:**

   - **Paso 1: Estructura HTML**

     Utiliza la página que creaste en la Clase 1 como base. Añade una nueva sección que contenga varios elementos (por ejemplo, tarjetas de contenido, imágenes, o una galería).

     ```html
     <section class="galeria">
         <div class="tarjeta">
             <h2>Título 1</h2>
             <p>Descripción de la tarjeta 1.</p>
         </div>
         <div class="tarjeta">
             <h2>Título 2</h2>
             <p>Descripción de la tarjeta 2.</p>
         </div>
         <div class="tarjeta">
             <h2>Título 3</h2>
             <p>Descripción de la tarjeta 3.</p>
         </div>
         <!-- Añade más tarjetas según desees -->
     </section>
     ```

   - **Paso 2: Estilos CSS con Flexbox**

     Aplica estilos para que las tarjetas se distribuyan de manera flexible y responsiva.

     ```css
     .galeria {
         display: flex;
         flex-wrap: wrap;
         justify-content: space-around;
         padding: 20px;
         background-color: #f4f4f4;
     }

     .tarjeta {
         background-color: white;
         border: 1px solid #ddd;
         border-radius: 5px;
         padding: 20px;
         margin: 10px;
         flex: 1 1 300px; /* Crece y se encoge, con un ancho base de 300px */
         box-shadow: 0 2px 5px rgba(0,0,0,0.1);
     }

     .tarjeta h2 {
         margin-top: 0;
     }
     ```

   - **Paso 3: Implementar Media Queries**

     Ajusta el diseño para pantallas más pequeñas.

     ```css
     @media (max-width: 600px) {
         .galeria {
             flex-direction: column;
             align-items: center;
         }

         .tarjeta {
             flex: 1 1 80%;
         }
     }
     ```

     En este ejemplo, para pantallas con un ancho máximo de 600px, las tarjetas se apilan en una columna y ocupan el 80% del ancho del contenedor.

2. **Agregar Interactividad con JavaScript:**

   - Añade un botón que, al ser clicado, muestre u oculte la sección de la galería.

     **HTML:**

     ```html
     <button id="toggleGaleria">Mostrar/Ocultar Galería</button>
     ```

     **CSS:**

     ```css
     #toggleGaleria {
         display: block;
         margin: 20px auto;
         padding: 10px 20px;
         font-size: 16px;
         cursor: pointer;
     }
     ```

     **JavaScript:**

     ```javascript
     const toggleButton = document.getElementById("toggleGaleria");
     const galeria = document.querySelector(".galeria");

     toggleButton.addEventListener("click", () => {
         if (galeria.style.display === "none") {
             galeria.style.display = "flex";
         } else {
             galeria.style.display = "none";
         }
     });
     ```

     Este script agrega una funcionalidad que permite mostrar u ocultar la galería al hacer clic en el botón.

3. **Experimentar y Personalizar:**

   - **Cambiar Colores y Estilos:** Personaliza los colores, fuentes y estilos para que la página refleje tu gusto personal.
   - **Agregar Más Elementos:** Incorpora más secciones, imágenes, o funcionalidades interactivas para enriquecer tu página.
   - **Probar en Diferentes Dispositivos:** Utiliza las herramientas de desarrollo de tu navegador para simular diferentes tamaños de pantalla y asegurarte de que el diseño se adapta correctamente.

¡Comparte tu progreso o cualquier duda que tengas, y estaré encantado de ayudarte! ¡Sigue así y continúa practicando para mejorar tus habilidades en desarrollo web!